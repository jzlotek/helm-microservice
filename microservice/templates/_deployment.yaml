{{- define "deployment" -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "microservice.fullname" . }}
  {{- if .Values.annotations }}
  annotations:
  {{- range $key, $value := .Values.annotations }}
    {{ $key }}: {{ $value }}
  {{- end }}
  {{- end }}
  labels:
    app.kubernetes.io/name: {{ include "microservice.name" . }}
    helm.sh/chart: {{ include "microservice.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "microservice.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  strategy:
  {{- if not .Values.strategy }}
    rollingUpdate:
      maxSurge: 1
      {{- if eq .Values.global.replicaCount 1.0 }} # HA when replicaCount == 1
      maxUnavailable: 0
      {{- else }}
      maxUnavailable: 1
      {{- end }}
  {{- else }}
    {{ .Values.strategy | indent 4 }}
  {{- end }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "microservice.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- if .Values.serviceAccount }}
      serviceAccountName: {{ .Values.serviceAccount }}
      {{- end }}
      {{- if .Values.hostAliases }}
      hostAliases:
      {{- range .Values.hostAliases }}
      - ip: {{ .ip }}
        hostnames:
        {{- range .hostnames }}
        - {{ . }}
        {{- end }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            {{- range .Values.services -}}
            {{- range $port:= .specs}}
            - name: {{ .name }}
              containerPort: {{ .targetPort | default .port}}
              protocol: {{ .protocol | default "TCP" }}
            {{- end }}
            {{- end }}
          {{- if .Values.livenessEndpoint }}
          livenessProbe:
            httpGet:
              path: {{ .Values.livenessEndpoint }}
              port: http
            initialDelaySeconds: 3
            periodSeconds: 3
          {{- end }}
          {{- if .Values.readinessEndpoint }}
          readinessProbe:
            httpGet:
              path: {{ .Values.readinessEndpoint }}
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          {{- end }}
          {{- if .Values.command }}
          command: [{{ .Values.command | quote }}]
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- range .Values.args }}
            - {{ . | quote }}
            {{- end }}
          {{- end }}
          env:
          {{- range concat (.Values.global.environment) (.Values.environment | default list)}}
          - name: {{ .name | quote }}
            {{- if .value }}
            value: {{ .value | quote }}
            {{- else if .valueFrom }}
            valueFrom:
              secretKeyRef:
                name: {{ .valueFrom.secretKeyRef.name | quote }}
                key: {{ .valueFrom.secretKeyRef.key | quote }}
            {{- end }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
{{- end -}}
